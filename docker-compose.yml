services:
  postgres:
    image: postgres:15-alpine
    container_name: orchestrator-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orchestrator
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d orchestrator"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  # Runs ONCE, applies schema, then exits
  db-init:
    image: postgres:15-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: postgres
    volumes:
      - ./db-init.sql:/schema.sql:ro
    entrypoint: ["sh", "-c", "psql -h postgres -U postgres -d orchestrator -f /schema.sql"]
    restart: "no"

  api:
    build: .
    image: team3-orchestrator:latest
    container_name: orchestrator-api
    environment:
      POSTGRES_URL: postgresql://postgres:postgres@postgres:5432/orchestrator
      HEALTH_INTERVAL_SECONDS: "60"
      HEALTH_RETENTION_DAYS: "7"
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


volumes:
  pgdata:
