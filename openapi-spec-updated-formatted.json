{
    "openapi": "3.1.0",
    "info": {
        "title": "Team 3 Orchestrator API",
        "version": "1.0.0"
    },
    "paths": {
        "/health": {
            "get": {
                "summary": "Health",
                "description": "Basic health check - just returns OK if the service is running",
                "operationId": "health_health_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/health/detailed": {
            "get": {
                "summary": "Health Detailed",
                "description": "Detailed health check - validates all system components",
                "operationId": "health_detailed_health_detailed_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/test/integration": {
            "get": {
                "summary": "Test Integration",
                "description": "Test endpoint to validate complete system integration",
                "operationId": "test_integration_test_integration_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/system/resources": {
            "get": {
                "summary": "Get System Resources",
                "description": "Returns available system resources for scaling decisions",
                "operationId": "get_system_resources_system_resources_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/images": {
            "get": {
                "summary": "Get Images",
                "description": "Returns current desired state and running container counts from PostgresStore",
                "operationId": "get_images_images_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/start/container": {
            "post": {
                "summary": "Start Container",
                "description": "Starts or reuses a container for a given image with env/ports/resources",
                "operationId": "start_container_start_container_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StartBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/containers": {
            "get": {
                "summary": "Get All Containers",
                "description": "Returns all managed containers with status + host port bindings",
                "operationId": "get_all_containers_containers_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/containers/{imageId}/instances": {
            "get": {
                "summary": "Get Instances",
                "operationId": "get_instances_containers__imageId__instances_get",
                "parameters": [
                    {
                        "name": "imageId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Imageid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InstancesResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/containers/instances/{instanceId}/health": {
            "get": {
                "summary": "Instance Health",
                "operationId": "instance_health_containers_instances__instanceId__health_get",
                "parameters": [
                    {
                        "name": "instanceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Instanceid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/containers/{imageId}/start": {
            "post": {
                "summary": "Start Image",
                "operationId": "start_image_containers__imageId__start_post",
                "parameters": [
                    {
                        "name": "imageId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Imageid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StartBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StartResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/containers/{imageId}/stop": {
            "post": {
                "summary": "Stop Image Instance",
                "operationId": "stop_image_instance_containers__imageId__stop_post",
                "parameters": [
                    {
                        "name": "imageId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Imageid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StopBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StopResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/containers/{idOrName}": {
            "delete": {
                "summary": "Delete Container By Id",
                "description": "Removes the container by ID or name",
                "operationId": "delete_container_by_id_containers__idOrName__delete",
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Idorname"
                        }
                    },
                    {
                        "name": "force",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Force deletion",
                            "default": false,
                            "title": "Force"
                        },
                        "description": "Force deletion"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/containers/{imageId}": {
            "delete": {
                "summary": "Delete Image Instance",
                "operationId": "delete_image_instance_containers__imageId__delete",
                "parameters": [
                    {
                        "name": "imageId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Imageid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/containers/{imageId}/resources": {
            "put": {
                "summary": "Update Resources",
                "operationId": "update_resources_containers__imageId__resources_put",
                "parameters": [
                    {
                        "name": "imageId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Imageid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutResourcesBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateResourcesResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/registry/endpoints": {
            "post": {
                "summary": "Register or update an endpoint",
                "description": "Register a new endpoint or update an existing one.\nReturns the saved endpoint with refreshed last_heartbeat.",
                "operationId": "register_or_update_endpoint_registry_endpoints_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/registry/endpoints/{endpoint_id}": {
            "delete": {
                "summary": "Delete an endpoint",
                "description": "Remove an endpoint by id.\nReturns: { \"ok\": true } if deleted. 404 if it doesn't exist.",
                "operationId": "delete_endpoint_registry_endpoints__endpoint_id__delete",
                "parameters": [
                    {
                        "name": "endpoint_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Endpoint Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "boolean"
                                    },
                                    "title": "Response Delete Endpoint Registry Endpoints  Endpoint Id  Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/registry/endpoints/{endpoint_id}/status": {
            "put": {
                "summary": "Set endpoint status (UP or DOWN)",
                "description": "Update status for an existing endpoint.\nPer your note, we limit to UP/DOWN. (DEGRADED is easy to enable later.)",
                "operationId": "set_endpoint_status_registry_endpoints__endpoint_id__status_put",
                "parameters": [
                    {
                        "name": "endpoint_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Endpoint Id"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/StatusEnum"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Caps": {
                "properties": {
                    "cpu": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Cpu",
                        "description": "e.g. '0.5' (cpus)"
                    },
                    "mem": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Mem",
                        "description": "e.g. '512m'"
                    }
                },
                "type": "object",
                "title": "Caps"
            },
            "DeleteBody": {
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "title": "Instanceid"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ],
                "title": "DeleteBody"
            },
            "DeleteResponse": {
                "properties": {
                    "deleted": {
                        "type": "boolean",
                        "title": "Deleted"
                    }
                },
                "type": "object",
                "required": [
                    "deleted"
                ],
                "title": "DeleteResponse"
            },
            "EndpointIn": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "Unique endpoint id (usually container id or name)"
                    },
                    "image_id": {
                        "type": "string",
                        "title": "Image Id",
                        "description": "Image tag / id this endpoint runs"
                    },
                    "host": {
                        "type": "string",
                        "title": "Host",
                        "description": "Host/IP where service is reachable"
                    },
                    "port": {
                        "type": "integer",
                        "maximum": 65535.0,
                        "minimum": 1.0,
                        "title": "Port",
                        "description": "Service port on host"
                    },
                    "caps": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Caps"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "image_id",
                    "host",
                    "port"
                ],
                "title": "EndpointIn"
            },
            "EndpointOut": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "Unique endpoint id (usually container id or name)"
                    },
                    "image_id": {
                        "type": "string",
                        "title": "Image Id",
                        "description": "Image tag / id this endpoint runs"
                    },
                    "host": {
                        "type": "string",
                        "title": "Host",
                        "description": "Host/IP where service is reachable"
                    },
                    "port": {
                        "type": "integer",
                        "maximum": 65535.0,
                        "minimum": 1.0,
                        "title": "Port",
                        "description": "Service port on host"
                    },
                    "caps": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Caps"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/StatusEnum"
                            }
                        ],
                        "default": "UP"
                    },
                    "last_heartbeat": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Last Heartbeat",
                        "description": "Updated on each register/update"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "image_id",
                    "host",
                    "port"
                ],
                "title": "EndpointOut"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "HealthResponse": {
                "properties": {
                    "cpu_usage": {
                        "type": "number",
                        "title": "Cpu Usage"
                    },
                    "memory_usage": {
                        "type": "number",
                        "title": "Memory Usage"
                    },
                    "disk_usage": {
                        "type": "number",
                        "title": "Disk Usage"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "healthy",
                            "warning",
                            "critical",
                            "stopped"
                        ],
                        "title": "Status"
                    },
                    "errors": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Errors"
                    }
                },
                "type": "object",
                "required": [
                    "cpu_usage",
                    "memory_usage",
                    "disk_usage",
                    "status"
                ],
                "title": "HealthResponse"
            },
            "InstanceResources": {
                "properties": {
                    "cpu_limit": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Cpu Limit"
                    },
                    "memory_limit": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Memory Limit"
                    },
                    "disk_limit": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Disk Limit"
                    }
                },
                "type": "object",
                "title": "InstanceResources"
            },
            "InstanceView": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "running",
                            "stopped"
                        ],
                        "title": "Status"
                    },
                    "endpoint": {
                        "type": "string",
                        "title": "Endpoint"
                    },
                    "resources": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/InstanceResources"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "status",
                    "endpoint"
                ],
                "title": "InstanceView"
            },
            "InstancesResponse": {
                "properties": {
                    "instances": {
                        "items": {
                            "$ref": "#/components/schemas/InstanceView"
                        },
                        "type": "array",
                        "title": "Instances"
                    }
                },
                "type": "object",
                "required": [
                    "instances"
                ],
                "title": "InstancesResponse"
            },
            "PortMapping": {
                "properties": {
                    "container": {
                        "type": "integer",
                        "title": "Container",
                        "description": "Container port number"
                    },
                    "host": {
                        "type": "integer",
                        "title": "Host",
                        "description": "Host port number"
                    }
                },
                "type": "object",
                "required": [
                    "container",
                    "host"
                ],
                "title": "PortMapping",
                "description": "Port mapping configuration"
            },
            "PutResourcesBody": {
                "properties": {
                    "cpu_limit": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Cpu Limit"
                    },
                    "memory_limit": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Memory Limit"
                    },
                    "disk_limit": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Disk Limit"
                    }
                },
                "type": "object",
                "title": "PutResourcesBody"
            },
            "ResourceRequirements": {
                "properties": {
                    "cpu": {
                        "type": "string",
                        "title": "Cpu",
                        "description": "CPU allocation (e.g., '1.0', '0.5')"
                    },
                    "memory": {
                        "type": "string",
                        "title": "Memory",
                        "description": "Memory allocation (e.g., '512Mi', '1Gi')"
                    },
                    "disk": {
                        "type": "string",
                        "title": "Disk",
                        "description": "Disk allocation (e.g., '10GB', '1Gi')"
                    }
                },
                "type": "object",
                "required": [
                    "cpu",
                    "memory",
                    "disk"
                ],
                "title": "ResourceRequirements",
                "description": "Resource requirements for container instances"
            },
            "StartBody": {
                "properties": {
                    "image": {
                        "type": "string",
                        "title": "Image",
                        "description": "Docker image name (e.g., 'nginx:latest')"
                    },
                    "image_url": {
                        "type": "string",
                        "title": "Image Url",
                        "description": "URL for orchestrator to download the image"
                    },
                    "min_replicas": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Min Replicas",
                        "description": "Minimum number of container replicas",
                        "default": 1
                    },
                    "max_replicas": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Max Replicas",
                        "description": "Maximum number of container replicas",
                        "default": 5
                    },
                    "resources": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ResourceRequirements"
                            }
                        ],
                        "description": "Resource requirements for containers"
                    },
                    "env": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Env",
                        "description": "Environment variables"
                    },
                    "ports": {
                        "items": {
                            "$ref": "#/components/schemas/PortMapping"
                        },
                        "type": "array",
                        "title": "Ports",
                        "description": "Port mappings"
                    },
                    "count": {
                        "anyOf": [
                            {
                                "type": "integer",
                                "minimum": 1.0
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Count",
                        "description": "Number of containers to start (legacy field)"
                    }
                },
                "type": "object",
                "required": [
                    "image",
                    "image_url",
                    "resources"
                ],
                "title": "StartBody",
                "description": "Properly typed request body for starting container instances"
            },
            "StartResponse": {
                "properties": {
                    "started": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Started"
                    }
                },
                "type": "object",
                "required": [
                    "started"
                ],
                "title": "StartResponse"
            },
            "StatusEnum": {
                "type": "string",
                "enum": [
                    "UP",
                    "DOWN"
                ],
                "title": "StatusEnum"
            },
            "StopBody": {
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "title": "Instanceid"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId"
                ],
                "title": "StopBody"
            },
            "StopResponse": {
                "properties": {
                    "stopped": {
                        "type": "boolean",
                        "title": "Stopped"
                    }
                },
                "type": "object",
                "required": [
                    "stopped"
                ],
                "title": "StopResponse"
            },
            "UpdateResourcesResponse": {
                "properties": {
                    "updated": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Updated"
                    }
                },
                "type": "object",
                "required": [
                    "updated"
                ],
                "title": "UpdateResourcesResponse"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            }
        }
    }
}
