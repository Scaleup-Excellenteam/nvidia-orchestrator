[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nvidia-orchestrator"
version = "1.0.0"
description = "A container orchestration system for managing Docker containers with health monitoring and PostgreSQL storage"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Team 3", email = "team3@example.com"}
]
maintainers = [
    {name = "Team 3", email = "team3@example.com"}
]
keywords = ["orchestrator", "docker", "container", "monitoring", "nvidia"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
    "Operating System :: OS Independent",
    "Framework :: FastAPI",
]

dependencies = [
    "fastapi==0.111.0",
    "uvicorn[standard]==0.30.0",
    "docker==7.1.0",
    "pydantic==2.8.2",
    "psycopg[binary]>=3.1",
    "requests>=2.31.0",
    "httpx>=0.24.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.0.280",
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
    "types-requests>=2.31.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.24.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.23.0",
]

all = [
    "nvidia-orchestrator[dev,test,docs]",
]

[project.scripts]
# Main entry point that brings up the server
nvidia-orchestrator = "nvidia_orchestrator.cli:main"
nvidia-orchestrator-server = "nvidia_orchestrator.main:run"
# Specific component entry points
nvidia-orchestrator-api = "nvidia_orchestrator.api.app:run_server"
nvidia-orchestrator-monitor = "nvidia_orchestrator.monitoring.health_monitor:run_forever"

[project.urls]
Homepage = "https://github.com/team3/nvidia-orchestrator"
Documentation = "https://nvidia-orchestrator.readthedocs.io"
Repository = "https://github.com/team3/nvidia-orchestrator"
"Bug Tracker" = "https://github.com/team3/nvidia-orchestrator/issues"
Changelog = "https://github.com/team3/nvidia-orchestrator/blob/main/CHANGELOG.md"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["nvidia_orchestrator*"]
namespaces = false

[tool.setuptools.package-data]
nvidia_orchestrator = ["py.typed"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-third-party = ["fastapi", "pydantic", "docker", "psycopg"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
ignore_missing_imports = true
files = ["src/nvidia_orchestrator"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
    "-ra",
    "--strict-markers",
    "--ignore=docs",
    "--ignore=setup.py",
    "--cov=nvidia_orchestrator",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src/nvidia_orchestrator"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 